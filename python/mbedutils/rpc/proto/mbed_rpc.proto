syntax = "proto2";
import "nanopb.proto";

package mbed.rpc;

enum ProtocolVersion {
  RPC_PROTOCOL_VER = 1;
}

enum ErrorCode {
  ERR_NO_ERROR           = 0;  // No error occurred
  ERR_SVC_ASYNC          = 1;  // Used to indicate that the service is processing the request asynchronously without error so far
  ERR_SVC_BUSY           = 2;  // Service is busy and cannot process the request
  ERR_RPC_VER            = 3;  // RPC protocol version mismatch
  ERR_MSG_VER            = 4;  // Message version mismatch
  ERR_MSG_SIZE           = 5;  // Message size is incorrect
  ERR_MSG_CRC            = 6;  // Message CRC is incorrect
  ERR_MSG_DECODE         = 7;  // Message failed to decode
  ERR_SVC_NOT_FOUND      = 8;  // Service not found
  ERR_MSG_NOT_FOUND      = 9;  // Message not found
  ERR_SVC_MSG            = 10; // Service does not support the message
  ERR_SVC_FAILED         = 11; // Service failed to process the message
  ERR_SVC_NO_RSP         = 12; // Service has no response to the message
  ERR_SVC_INVALID_ARG    = 13; // Service received invalid arguments
  ERR_SVC_ASYNC_WITH_RSP = 14; // Service is processing the request asynchronously, but will send an immediate response

  ERR_MAX_ERROR = 255; // Maximum error value
}

enum BuiltinService {
  SVC_PING = 0;       // Accepts ping requests from clients
  SVC_TEST_ERROR = 1; // Test error handling
  SVC_NOTIFY_TIME_ELAPSED = 2; // Notify caller of elapsed system time
  SVC_LOGGER_ERASE = 3;    // Logger service to erase logs
  SVC_LOGGER_READ = 4;     // Logger service to read logs
  SVC_LOGGER_WRITE = 5;    // Logger service to write logs
}

enum BuiltinMessage {
  MSG_NULL = 0;
  MSG_ERROR = 1;
  MSG_PING = 2;
  MSG_ACK_NACK = 3;
  MSG_TICK = 4;
  MSG_CONSOLE = 5;
  MSG_SYSTEM_INFO = 6;
  MSG_NOTIFY_TIME_ELAPSED_REQ = 7;
  MSG_NOTIFY_TIME_ELAPSED_RSP = 8;
  MSG_LOGGER_ERASE_REQ = 9;
  MSG_LOGGER_ERASE_RSP = 10;
  MSG_LOGGER_READ_REQ = 11;
  MSG_LOGGER_READ_RSP = 12;
  MSG_LOGGER_READ_STREAM_RSP = 13;
  MSG_LOGGER_WRITE_REQ = 14;
  MSG_LOGGER_WRITE_RSP = 15;
}

enum BuiltinMessageVersion {
  option allow_alias = true;

  MSG_VER_NULL = 0;
  MSG_VER_ERROR = 0;
  MSG_VER_PING = 0;
  MSG_VER_ACK_NACK = 0;
  MSG_VER_TICK = 0;
  MSG_VER_CONSOLE = 0;
  MSG_VER_SYSTEM_INFO = 0;
  MSG_VER_NOTIFY_TIME_ELAPSED_REQ = 0;
  MSG_VER_NOTIFY_TIME_ELAPSED_RSP = 0;
  MSG_VER_LOGGER_ERASE_REQ = 0;
  MSG_VER_LOGGER_ERASE_RSP = 0;
  MSG_VER_LOGGER_READ_REQ = 0;
  MSG_VER_LOGGER_READ_RSP = 0;
  MSG_VER_LOGGER_READ_STREAM_RSP = 0;
  MSG_VER_LOGGER_WRITE_REQ = 0;
  MSG_VER_LOGGER_WRITE_RSP = 0;
}

// Core message header common to all types. Each functional message type **must**
// have this first in their list of declarations.
message Header {
  required uint32 version = 1 [(nanopb).int_size = IS_8]; // Version of this message.
  required uint32 seqId = 2 [(nanopb).int_size = IS_8];   // Sequence ID for the message transaction
  required uint32 msgId = 3 [(nanopb).int_size = IS_8];   // Root message identifier
  required uint32 svcId = 4 [(nanopb).int_size = IS_8];   // Service identifier the message is for
}

// Root type that parsers can use to peek at messages and figure out what type the full message is.
message BaseMessage {
  required Header header = 1;
}

// Simple empty message type
message NullMessage {
  required Header header = 1;
}

// Message type for error responses.
message ErrorMessage {
  required Header    header = 1;
  required ErrorCode error  = 2 [(nanopb).int_size = IS_8];
  required bytes     detail = 3 [(nanopb).max_size = 256];
}

// Generic ACK or NACK to a previous message, with optional data payload
message AckNackMessage {
  required Header    header      = 1;
  required bool      acknowledge = 2;                            // True if this is an ACK, false if it's a NACK
  optional ErrorCode status_code = 3 [(nanopb).int_size = IS_8]; // Optional error code for the ACK/NACK
  optional bytes     data        = 4 [(nanopb).max_size = 64 ];  // Optional data payload for small responses
}

// Advertise the current system tick time
message TickMessage {
  required Header header = 1;
  required uint32 tick = 2;   // System time in milliseconds
}

// Stream console messages in real time
message ConsoleMessage {
  required Header header       = 1;
  required uint32 this_frame   = 2 [(nanopb).int_size = IS_8]; // Which frame is this?
  required uint32 total_frames = 3 [(nanopb).int_size = IS_8]; // How many frames are there?
  required bytes  data         = 4 [(nanopb).max_size = 128];  // Data payload
}

// Message type for announcing some device descriptions
message SystemInfoMessage {
  required Header header        = 1;
  required string sw_version    = 2 [(nanopb).max_size = 16, (nanopb).fixed_length = true]; // Software version
  required string serial_number = 3 [(nanopb).max_size = 16, (nanopb).fixed_length = true]; // Serial number
  required string description   = 4 [(nanopb).max_size = 32, (nanopb).fixed_length = true]; // Device description
}


// ****************************************************************************
// Ping Service
// ****************************************************************************

// Simple ping message to test RPC connection.
message PingMessage {
  required Header header = 1;
}

// ****************************************************************************
// Notify Time Elapsed Service
// ****************************************************************************

message NotifyTimeElapsedRequest {
  required mbed.rpc.Header header = 1;
  required uint32 delay_time = 2 [ (nanopb).int_size = IS_32 ]; // Time to delay in ms
}

message NotifyTimeElapsedResponse {
  required mbed.rpc.Header header = 1;
  required uint32 elapsed_time = 2 [ (nanopb).int_size = IS_32 ]; // Time elapsed in ms
}

// ****************************************************************************
// Logger Service
// ****************************************************************************

message LoggerEraseRequest {
  required mbed.rpc.Header header = 1;
  required uint32 which = 2 [(nanopb).int_size = IS_8]; // Which log to erase
}

message LoggerEraseResponse {
  required mbed.rpc.Header header = 1;
  required bool success = 2; // True if the log was erased successfully
}

message LoggerReadRequest {
  required mbed.rpc.Header header = 1;
  required uint32 which = 2 [(nanopb).int_size = IS_8]; // Which log to read
  required bool direction = 3; // True for forward (FIFO), false for backward (LIFO)
  required int32 count = 4 [(nanopb).int_size = IS_32]; // Number of entries to read, -1 for all
}

message LoggerReadResponse {
  required mbed.rpc.Header header = 1;
  required bool success = 2; // True if data is available
}

message LoggerReadStreamResponse {
  required mbed.rpc.Header header = 1;
  required uint32 index = 2 [(nanopb).int_size = IS_16]; // Index of the log entry
  required bytes data = 3 [(nanopb).max_size = 512]; // Data payload
}

message LoggerWriteRequest {
  enum Level {
    LEVEL_TRACE = 0;
    LEVEL_DEBUG = 1;
    LEVEL_INFO = 2;
    LEVEL_WARN = 3;
    LEVEL_ERROR = 4;
    LEVEL_FATAL = 5;
  }

  required mbed.rpc.Header header = 1;
  required Level level = 2 [(nanopb).int_size = IS_8]; // Log level
  required uint32 which = 3 [(nanopb).int_size = IS_8]; // Which log to write
  required bytes data = 4 [(nanopb).max_size = 512]; // Data payload
}

message LoggerWriteResponse {
  required mbed.rpc.Header header = 1;
  required bool success = 2; // True if the data was logged successfully
}
