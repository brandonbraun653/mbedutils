syntax = "proto2";
import "nanopb.proto";

package mbed.rpc;


enum ErrorCode {
  NO_ERROR = 0;
}

enum BuiltinServices {
  SVC_PING = 0;
}

enum BuiltinMessages {
  MSG_PING = 0;
}


// Core message header common to all types. Each functional message type **must**
// have this first in their list of declarations.
message Header {
  enum Constants {
    MAGIC = 0x1e10964c ;
  }

  required uint32 magic = 1; // Magic number to identify the message as an RPC message
  required uint32 msgId = 2 [(nanopb).int_size = IS_8]; // Root message identifier
  required uint32 subId = 3 [(nanopb).int_size = IS_8]; // Possible sub-identifier to specify root ID details
  required uint32 seqId = 4 [(nanopb).int_size = IS_16]; // Sequence ID for the message transaction
}

// Root type that parsers can use to peek at messages and figure out what type the full message is.
message BaseMessage {
  required Header header = 1;
}

// Simple ping message to test RPC connection.
message Ping {
  required Header header = 1;
  required uint32 timestamp = 2;
}

// Message to request a list of all available RPC functions.
message ListFunctionsRequest {
  required Header header = 1;
}

// Message to respond to a ListFunctionsRequest.
message ListFunctionsResponse {
  required Header header = 1;
  repeated string functions = 2;
}
